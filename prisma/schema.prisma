// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  Name   String
  Email  String           @unique
  Cpf    String
  orders ProductsOrders[]
  Order  Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("customers")
}

model Order {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  Price          Float
  Currency       Int
  Invoice        Int
  Status         String
  PaymentMethod  String
  production     Production?      @relation(fields: [productionId], references: [id])
  ProductsOrders ProductsOrders[]
  customerId     String
  Product        Product[]
  Customer       Customer         @relation(fields: [customerId], references: [id])
  productionId   String?          @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("orders")
}

model Product {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  Name           String
  Description    String
  Price          String
  Currency       String
  ProductsOrders ProductsOrders[]
  Order          Order?           @relation(fields: [orderId], references: [id])
  orderId        String?          @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("products")
}

model ProductsOrders {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String
  productId    String
  order        Order       @relation(fields: [orderId], references: [id])
  product      Product     @relation(fields: [productId], references: [id])
  Customer     Customer?   @relation(fields: [customerId], references: [id])
  customerId   String?     @db.ObjectId
  Production   Production? @relation(fields: [productionId], references: [id])
  productionId String?     @db.ObjectId

  @@map("productsorders")
}

model Production {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  status         String
  ProductsOrders ProductsOrders[]
  Order          Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("productions")
}
